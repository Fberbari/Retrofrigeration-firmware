
Retrofrigeration-firmware_DavidBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002fb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002fb4  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd11  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002154  00000000  00000000  0002dd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00030ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014981  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105c6  00000000  00000000  00046329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826ba  00000000  00000000  000568ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  000d8ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002f30 	.word	0x08002f30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002f30 	.word	0x08002f30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <Actuators_Init>:
/***********************************************************************************************************************
 * Code
 **********************************************************************************************************************/

void Actuators_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
}
 8000220:	46c0      	nop			; (mov r8, r8)
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <Actuators_ActuateSystem>:

int Actuators_ActuateSystem(const ActuatorCommands_t * ActuatorCommands)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
    return RETROFRIGERATION_SUCCEEDED;
 800022e:	2301      	movs	r3, #1
}
 8000230:	0018      	movs	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}

08000238 <Controller_Init>:
/***********************************************************************************************************************
 * Code
 **********************************************************************************************************************/

void Controller_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    Actuators_Init();
 800023c:	f7ff ffee 	bl	800021c <Actuators_Init>

    StartPeriodTimer();
 8000240:	f000 f888 	bl	8000354 <StartPeriodTimer>

    currentState = CTRL_COLLECT_DATA;
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <Controller_Init+0x18>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000030 	.word	0x20000030

08000254 <Controller_SaveTheAfricans>:

void Controller_SaveTheAfricans(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
    Controller_State_t nextState;
    switch(currentState)
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <Controller_SaveTheAfricans+0x78>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b05      	cmp	r3, #5
 8000260:	d828      	bhi.n	80002b4 <Controller_SaveTheAfricans+0x60>
 8000262:	009a      	lsls	r2, r3, #2
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <Controller_SaveTheAfricans+0x7c>)
 8000266:	18d3      	adds	r3, r2, r3
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	469f      	mov	pc, r3
    {
        case CTRL_COLLECT_DATA:
            nextState = CollectData_State();
 800026c:	1dfc      	adds	r4, r7, #7
 800026e:	f000 f831 	bl	80002d4 <CollectData_State>
 8000272:	0003      	movs	r3, r0
 8000274:	7023      	strb	r3, [r4, #0]
            break;
 8000276:	e021      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        case CTRL_LOG_DATA:
            nextState = LogData_State();
 8000278:	1dfc      	adds	r4, r7, #7
 800027a:	f000 f831 	bl	80002e0 <LogData_State>
 800027e:	0003      	movs	r3, r0
 8000280:	7023      	strb	r3, [r4, #0]
            break;
 8000282:	e01b      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        case CTRL_DO_MATH:
            nextState = DoMath_State();
 8000284:	1dfc      	adds	r4, r7, #7
 8000286:	f000 f831 	bl	80002ec <DoMath_State>
 800028a:	0003      	movs	r3, r0
 800028c:	7023      	strb	r3, [r4, #0]
            break;
 800028e:	e015      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        case CTRL_ACTUATE_FRIDGE:
            nextState = ActuateFridge_State();
 8000290:	1dfc      	adds	r4, r7, #7
 8000292:	f000 f831 	bl	80002f8 <ActuateFridge_State>
 8000296:	0003      	movs	r3, r0
 8000298:	7023      	strb	r3, [r4, #0]
            break;
 800029a:	e00f      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        case CTRL_WAIT_FOR_TIMER:
            nextState = WaitForTimer_State();
 800029c:	1dfc      	adds	r4, r7, #7
 800029e:	f000 f841 	bl	8000324 <WaitForTimer_State>
 80002a2:	0003      	movs	r3, r0
 80002a4:	7023      	strb	r3, [r4, #0]
            break;
 80002a6:	e009      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        case CTRL_FAILED:
            nextState = Failed_State();
 80002a8:	1dfc      	adds	r4, r7, #7
 80002aa:	f000 f84d 	bl	8000348 <Failed_State>
 80002ae:	0003      	movs	r3, r0
 80002b0:	7023      	strb	r3, [r4, #0]
            break;
 80002b2:	e003      	b.n	80002bc <Controller_SaveTheAfricans+0x68>

        default:
            nextState = CTRL_FAILED;
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	2205      	movs	r2, #5
 80002b8:	701a      	strb	r2, [r3, #0]
            break;
 80002ba:	46c0      	nop			; (mov r8, r8)
    }

    currentState = nextState;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <Controller_SaveTheAfricans+0x78>)
 80002be:	1dfa      	adds	r2, r7, #7
 80002c0:	7812      	ldrb	r2, [r2, #0]
 80002c2:	701a      	strb	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b003      	add	sp, #12
 80002ca:	bd90      	pop	{r4, r7, pc}
 80002cc:	20000030 	.word	0x20000030
 80002d0:	08002f48 	.word	0x08002f48

080002d4 <CollectData_State>:

static Controller_State_t CollectData_State(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

    return CTRL_LOG_DATA;
 80002d8:	2301      	movs	r3, #1
}
 80002da:	0018      	movs	r0, r3
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LogData_State>:

static Controller_State_t LogData_State(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
    return CTRL_DO_MATH;
 80002e4:	2302      	movs	r3, #2
}
 80002e6:	0018      	movs	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <DoMath_State>:

static Controller_State_t DoMath_State(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    return CTRL_ACTUATE_FRIDGE;
 80002f0:	2303      	movs	r3, #3
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <ActuateFridge_State>:

static Controller_State_t ActuateFridge_State(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    int r = Actuators_ActuateSystem(&ActuatorCommands);
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <ActuateFridge_State+0x28>)
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ff90 	bl	8000226 <Actuators_ActuateSystem>
 8000306:	0003      	movs	r3, r0
 8000308:	607b      	str	r3, [r7, #4]

    if (r != RETROFRIGERATION_SUCCEEDED)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d001      	beq.n	8000314 <ActuateFridge_State+0x1c>
    {
        return CTRL_FAILED;
 8000310:	2305      	movs	r3, #5
 8000312:	e000      	b.n	8000316 <ActuateFridge_State+0x1e>
    }

    return CTRL_WAIT_FOR_TIMER;
 8000314:	2304      	movs	r3, #4
}
 8000316:	0018      	movs	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	20000028 	.word	0x20000028

08000324 <WaitForTimer_State>:

static Controller_State_t WaitForTimer_State(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    if (periodHasPassed)
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <WaitForTimer_State+0x20>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d004      	beq.n	800033a <WaitForTimer_State+0x16>
    {
        periodHasPassed = false;
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <WaitForTimer_State+0x20>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]

        return CTRL_COLLECT_DATA;
 8000336:	2300      	movs	r3, #0
 8000338:	e000      	b.n	800033c <WaitForTimer_State+0x18>
    }

    return CTRL_WAIT_FOR_TIMER;
 800033a:	2304      	movs	r3, #4
}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	20000031 	.word	0x20000031

08000348 <Failed_State>:

static Controller_State_t Failed_State(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    return CTRL_FAILED;
 800034c:	2305      	movs	r3, #5
}
 800034e:	0018      	movs	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <StartPeriodTimer>:

static void StartPeriodTimer(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim3);
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <StartPeriodTimer+0x14>)
 800035a:	0018      	movs	r0, r3
 800035c:	f002 f9ce 	bl	80026fc <HAL_TIM_Base_Start_IT>
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	20000080 	.word	0x20000080

0800036c <HAL_TIM_PeriodElapsedCallback>:


/****************************Interrupt Handlers****************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
    periodHasPassed = true;
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000031 	.word	0x20000031

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 fa12 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f80b 	bl	80003aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 f8e8 	bl	8000568 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000398:	f000 f850 	bl	800043c <MX_I2C2_Init>
  MX_TIM3_Init();
 800039c:	f000 f88e 	bl	80004bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Controller_Init();
 80003a0:	f7ff ff4a 	bl	8000238 <Controller_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    Controller_SaveTheAfricans();
 80003a4:	f7ff ff56 	bl	8000254 <Controller_SaveTheAfricans>
 80003a8:	e7fc      	b.n	80003a4 <main+0x1c>

080003aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003aa:	b590      	push	{r4, r7, lr}
 80003ac:	b093      	sub	sp, #76	; 0x4c
 80003ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b0:	2414      	movs	r4, #20
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	0018      	movs	r0, r3
 80003b6:	2334      	movs	r3, #52	; 0x34
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f002 fdb0 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	2310      	movs	r3, #16
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f002 fda9 	bl	8002f20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ce:	2380      	movs	r3, #128	; 0x80
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fc5a 	bl	8001c8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2202      	movs	r2, #2
 80003dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	2240      	movs	r2, #64	; 0x40
 80003f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	2200      	movs	r2, #0
 80003f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fc86 	bl	8001d0c <HAL_RCC_OscConfig>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000404:	f000 f8c6 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2207      	movs	r2, #7
 800040c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2100      	movs	r1, #0
 8000424:	0018      	movs	r0, r3
 8000426:	f001 ff87 	bl	8002338 <HAL_RCC_ClockConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800042e:	f000 f8b1 	bl	8000594 <Error_Handler>
  }
}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b013      	add	sp, #76	; 0x4c
 8000438:	bd90      	pop	{r4, r7, pc}
	...

0800043c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <MX_I2C2_Init+0x78>)
 8000444:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000448:	4a1b      	ldr	r2, [pc, #108]	; (80004b8 <MX_I2C2_Init+0x7c>)
 800044a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_I2C2_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_I2C2_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_I2C2_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fcd9 	bl	8000e30 <HAL_I2C_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000482:	f000 f887 	bl	8000594 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_I2C2_Init+0x74>)
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f001 fb66 	bl	8001b5c <HAL_I2CEx_ConfigAnalogFilter>
 8000490:	1e03      	subs	r3, r0, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000494:	f000 f87e 	bl	8000594 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_I2C2_Init+0x74>)
 800049a:	2100      	movs	r1, #0
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fba9 	bl	8001bf4 <HAL_I2CEx_ConfigDigitalFilter>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f875 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000034 	.word	0x20000034
 80004b4:	40005800 	.word	0x40005800
 80004b8:	00303d5b 	.word	0x00303d5b

080004bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	2310      	movs	r3, #16
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2310      	movs	r3, #16
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fd27 	bl	8002f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	230c      	movs	r3, #12
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fd20 	bl	8002f20 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_TIM3_Init+0xa4>)
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <MX_TIM3_Init+0xa8>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_TIM3_Init+0xa4>)
 80004e8:	22a0      	movs	r2, #160	; 0xa0
 80004ea:	0092      	lsls	r2, r2, #2
 80004ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_TIM3_Init+0xa4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_TIM3_Init+0xa4>)
 80004f6:	22fa      	movs	r2, #250	; 0xfa
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_TIM3_Init+0xa4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_TIM3_Init+0xa4>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_TIM3_Init+0xa4>)
 800050a:	0018      	movs	r0, r3
 800050c:	f002 f89e 	bl	800264c <HAL_TIM_Base_Init>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000514:	f000 f83e 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000518:	2110      	movs	r1, #16
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	0152      	lsls	r2, r2, #5
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000522:	187a      	adds	r2, r7, r1
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_TIM3_Init+0xa4>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fa67 	bl	80029fc <HAL_TIM_ConfigClockSource>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000532:	f000 f82f 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000542:	1d3a      	adds	r2, r7, #4
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_TIM3_Init+0xa4>)
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fc4b 	bl	8002de4 <HAL_TIMEx_MasterConfigSynchronization>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000552:	f000 f81f 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b008      	add	sp, #32
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000080 	.word	0x20000080
 8000564:	40000400 	.word	0x40000400

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_GPIO_Init+0x28>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_GPIO_Init+0x28>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_GPIO_Init+0x28>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	641a      	str	r2, [r3, #64]	; 0x40
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0549      	lsls	r1, r1, #21
 80005c8:	430a      	orrs	r2, r1
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_MspInit+0x44>)
 80005ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	055b      	lsls	r3, r3, #21
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b08b      	sub	sp, #44	; 0x2c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2414      	movs	r4, #20
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 fc90 	bl	8002f20 <memset>
  if(hi2c->Instance==I2C2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <HAL_I2C_MspInit+0xa0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d139      	bne.n	800067e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <HAL_I2C_MspInit+0xa4>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_I2C_MspInit+0xa4>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <HAL_I2C_MspInit+0xa4>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	22c0      	movs	r2, #192	; 0xc0
 8000626:	0152      	lsls	r2, r2, #5
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2212      	movs	r2, #18
 8000630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2206      	movs	r2, #6
 8000642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	187a      	adds	r2, r7, r1
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fa8b 	bl	8000b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_I2C_MspInit+0xa4>)
 8000654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_I2C_MspInit+0xa4>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	03c9      	lsls	r1, r1, #15
 800065c:	430a      	orrs	r2, r1
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_I2C_MspInit+0xa4>)
 8000662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	03db      	lsls	r3, r3, #15
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2018      	movs	r0, #24
 8000674:	f000 f9d0 	bl	8000a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000678:	2018      	movs	r0, #24
 800067a:	f000 f9e2 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b00b      	add	sp, #44	; 0x2c
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40005800 	.word	0x40005800
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <HAL_TIM_Base_MspInit+0x44>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d113      	bne.n	80006ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_TIM_Base_MspInit+0x48>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_TIM_Base_MspInit+0x48>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_TIM_Base_MspInit+0x48>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 f9aa 	bl	8000a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f000 f9bc 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b004      	add	sp, #16
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40000400 	.word	0x40000400
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f8c2 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <TIM3_IRQHandler+0x14>)
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f840 	bl	8002798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000080 	.word	0x20000080

08000724 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <I2C2_IRQHandler+0x2c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	23e0      	movs	r3, #224	; 0xe0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	4013      	ands	r3, r2
 8000734:	d004      	beq.n	8000740 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <I2C2_IRQHandler+0x2c>)
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fc29 	bl	8000f90 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800073e:	e003      	b.n	8000748 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <I2C2_IRQHandler+0x2c>)
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fc0a 	bl	8000f5c <HAL_I2C_EV_IRQHandler>
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000034 	.word	0x20000034

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f7ff fff6 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078e:	f002 fba3 	bl	8002ed8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000792:	f7ff fdf9 	bl	8000388 <main>

08000796 <LoopForever>:

LoopForever:
  b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a4:	08002fa8 	.word	0x08002fa8
  ldr r2, =_sbss
 80007a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ac:	200000d0 	.word	0x200000d0

080007b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_COMP_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_Init+0x3c>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Init+0x3c>)
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0049      	lsls	r1, r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ce:	2003      	movs	r0, #3
 80007d0:	f000 f810 	bl	80007f4 <HAL_InitTick>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d003      	beq.n	80007e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e001      	b.n	80007e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fede 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_InitTick+0x88>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d02b      	beq.n	8000864 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_InitTick+0x8c>)
 800080e:	681c      	ldr	r4, [r3, #0]
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <HAL_InitTick+0x88>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	0019      	movs	r1, r3
 8000816:	23fa      	movs	r3, #250	; 0xfa
 8000818:	0098      	lsls	r0, r3, #2
 800081a:	f7ff fc73 	bl	8000104 <__udivsi3>
 800081e:	0003      	movs	r3, r0
 8000820:	0019      	movs	r1, r3
 8000822:	0020      	movs	r0, r4
 8000824:	f7ff fc6e 	bl	8000104 <__udivsi3>
 8000828:	0003      	movs	r3, r0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 f919 	bl	8000a62 <HAL_SYSTICK_Config>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d112      	bne.n	800085a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d80a      	bhi.n	8000850 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2301      	movs	r3, #1
 800083e:	425b      	negs	r3, r3
 8000840:	2200      	movs	r2, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8e8 	bl	8000a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_InitTick+0x90>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e00d      	b.n	800086c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000850:	230f      	movs	r3, #15
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e008      	b.n	800086c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800085a:	230f      	movs	r3, #15
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	e003      	b.n	800086c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781b      	ldrb	r3, [r3, #0]
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b005      	add	sp, #20
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000008 	.word	0x20000008
 8000880:	20000000 	.word	0x20000000
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	18d2      	adds	r2, r2, r3
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000008 	.word	0x20000008
 80008a8:	200000cc 	.word	0x200000cc

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	200000cc 	.word	0x200000cc

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	0002      	movs	r2, r0
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b7f      	cmp	r3, #127	; 0x7f
 80008d2:	d809      	bhi.n	80008e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	001a      	movs	r2, r3
 80008da:	231f      	movs	r3, #31
 80008dc:	401a      	ands	r2, r3
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_EnableIRQ+0x30>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	4091      	lsls	r1, r2
 80008e4:	000a      	movs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b7f      	cmp	r3, #127	; 0x7f
 8000908:	d828      	bhi.n	800095c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <__NVIC_SetPriority+0xd4>)
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b25b      	sxtb	r3, r3
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	33c0      	adds	r3, #192	; 0xc0
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	589b      	ldr	r3, [r3, r2]
 800091a:	1dfa      	adds	r2, r7, #7
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	0011      	movs	r1, r2
 8000920:	2203      	movs	r2, #3
 8000922:	400a      	ands	r2, r1
 8000924:	00d2      	lsls	r2, r2, #3
 8000926:	21ff      	movs	r1, #255	; 0xff
 8000928:	4091      	lsls	r1, r2
 800092a:	000a      	movs	r2, r1
 800092c:	43d2      	mvns	r2, r2
 800092e:	401a      	ands	r2, r3
 8000930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	22ff      	movs	r2, #255	; 0xff
 8000938:	401a      	ands	r2, r3
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	0018      	movs	r0, r3
 8000940:	2303      	movs	r3, #3
 8000942:	4003      	ands	r3, r0
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000948:	481f      	ldr	r0, [pc, #124]	; (80009c8 <__NVIC_SetPriority+0xd4>)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b25b      	sxtb	r3, r3
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	430a      	orrs	r2, r1
 8000954:	33c0      	adds	r3, #192	; 0xc0
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800095a:	e031      	b.n	80009c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <__NVIC_SetPriority+0xd8>)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0019      	movs	r1, r3
 8000964:	230f      	movs	r3, #15
 8000966:	400b      	ands	r3, r1
 8000968:	3b08      	subs	r3, #8
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	3306      	adds	r3, #6
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	3304      	adds	r3, #4
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1dfa      	adds	r2, r7, #7
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	0011      	movs	r1, r2
 800097c:	2203      	movs	r2, #3
 800097e:	400a      	ands	r2, r1
 8000980:	00d2      	lsls	r2, r2, #3
 8000982:	21ff      	movs	r1, #255	; 0xff
 8000984:	4091      	lsls	r1, r2
 8000986:	000a      	movs	r2, r1
 8000988:	43d2      	mvns	r2, r2
 800098a:	401a      	ands	r2, r3
 800098c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	401a      	ands	r2, r3
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	2303      	movs	r3, #3
 800099e:	4003      	ands	r3, r0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	001c      	movs	r4, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	4023      	ands	r3, r4
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	430a      	orrs	r2, r1
 80009b6:	3306      	adds	r3, #6
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	18c3      	adds	r3, r0, r3
 80009bc:	3304      	adds	r3, #4
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b003      	add	sp, #12
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	045b      	lsls	r3, r3, #17
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d301      	bcc.n	80009e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e4:	2301      	movs	r3, #1
 80009e6:	e010      	b.n	8000a0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SysTick_Config+0x44>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	3a01      	subs	r2, #1
 80009ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2103      	movs	r1, #3
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ff7c 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SysTick_Config+0x44>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SysTick_Config+0x44>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	210f      	movs	r1, #15
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	0002      	movs	r2, r0
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ff33 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ffaf 	bl	80009d0 <SysTick_Config>
 8000a72:	0003      	movs	r3, r0
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a84:	210f      	movs	r1, #15
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2225      	movs	r2, #37	; 0x25
 8000a90:	5c9b      	ldrb	r3, [r3, r2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d006      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e049      	b.n	8000b3a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	210e      	movs	r1, #14
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	438a      	bics	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	491d      	ldr	r1, [pc, #116]	; (8000b48 <HAL_DMA_Abort_IT+0xcc>)
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <HAL_DMA_Abort_IT+0xd0>)
 8000ad8:	6859      	ldr	r1, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	221c      	movs	r2, #28
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_DMA_Abort_IT+0xd0>)
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000af4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00c      	beq.n	8000b18 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b08:	490f      	ldr	r1, [pc, #60]	; (8000b48 <HAL_DMA_Abort_IT+0xcc>)
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000b16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2225      	movs	r2, #37	; 0x25
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2224      	movs	r2, #36	; 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	0010      	movs	r0, r2
 8000b38:	4798      	blx	r3
    }
  }
  return status;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	fffffeff 	.word	0xfffffeff
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2225      	movs	r2, #37	; 0x25
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e147      	b.n	8000e08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x28>
 8000b8e:	e138      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x174>
 8000cda:	e092      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000cdc:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	589b      	ldr	r3, [r3, r2]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x1ca>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x1c6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a44      	ldr	r2, [pc, #272]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x1c2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x1be>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d32:	2300      	movs	r3, #0
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2103      	movs	r1, #3
 8000d38:	400a      	ands	r2, r1
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d44:	4936      	ldr	r1, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	58d3      	ldr	r3, [r2, r3]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	025b      	lsls	r3, r3, #9
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d78:	4929      	ldr	r1, [pc, #164]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d82:	2384      	movs	r3, #132	; 0x84
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	029b      	lsls	r3, r3, #10
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000da6:	491e      	ldr	r1, [pc, #120]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000da8:	2284      	movs	r2, #132	; 0x84
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	035b      	lsls	r3, r3, #13
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	4013      	ands	r3, r2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	d000      	beq.n	8000e16 <HAL_GPIO_Init+0x2ae>
 8000e14:	e6b0      	b.n	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021800 	.word	0x40021800
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000800 	.word	0x50000800
 8000e2c:	50000c00 	.word	0x50000c00

08000e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e082      	b.n	8000f48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2241      	movs	r2, #65	; 0x41
 8000e46:	5c9b      	ldrb	r3, [r3, r2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d107      	bne.n	8000e5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fbc5 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2241      	movs	r2, #65	; 0x41
 8000e62:	2124      	movs	r1, #36	; 0x24
 8000e64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	438a      	bics	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4934      	ldr	r1, [pc, #208]	; (8000f50 <HAL_I2C_Init+0x120>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4931      	ldr	r1, [pc, #196]	; (8000f54 <HAL_I2C_Init+0x124>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0209      	lsls	r1, r1, #8
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	e007      	b.n	8000ebe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2184      	movs	r1, #132	; 0x84
 8000eb8:	0209      	lsls	r1, r1, #8
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d104      	bne.n	8000ed0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	491f      	ldr	r1, [pc, #124]	; (8000f58 <HAL_I2C_Init+0x128>)
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	491a      	ldr	r1, [pc, #104]	; (8000f54 <HAL_I2C_Init+0x124>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69d9      	ldr	r1, [r3, #28]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2241      	movs	r2, #65	; 0x41
 8000f34:	2120      	movs	r1, #32
 8000f36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2242      	movs	r2, #66	; 0x42
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	f0ffffff 	.word	0xf0ffffff
 8000f54:	ffff7fff 	.word	0xffff7fff
 8000f58:	02008000 	.word	0x02008000

08000f5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
  }
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	001a      	movs	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d010      	beq.n	8000fd6 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	09db      	lsrs	r3, r3, #7
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8000fbe:	d00a      	beq.n	8000fd6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	0a9b      	lsrs	r3, r3, #10
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d010      	beq.n	8001004 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	09db      	lsrs	r3, r3, #7
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8000fec:	d00a      	beq.n	8001004 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	00d2      	lsls	r2, r2, #3
 8001002:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	0a5b      	lsrs	r3, r3, #9
 8001008:	001a      	movs	r2, r3
 800100a:	2301      	movs	r3, #1
 800100c:	4013      	ands	r3, r2
 800100e:	d010      	beq.n	8001032 <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	09db      	lsrs	r3, r3, #7
 8001014:	001a      	movs	r2, r3
 8001016:	2301      	movs	r3, #1
 8001018:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800101a:	d00a      	beq.n	8001032 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	2202      	movs	r2, #2
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	220b      	movs	r2, #11
 800103c:	4013      	ands	r3, r2
 800103e:	d005      	beq.n	800104c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fbd8 	bl	80017fc <I2C_ITError>
  }
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	0008      	movs	r0, r1
 800107e:	0011      	movs	r1, r2
 8001080:	1cfb      	adds	r3, r7, #3
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	003b      	movs	r3, r7
 8001088:	1c0a      	adds	r2, r1, #0
 800108a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2240      	movs	r2, #64	; 0x40
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <I2C_Slave_ISR_IT+0x24>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e0fa      	b.n	80012de <I2C_Slave_ISR_IT+0x21a>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	2101      	movs	r1, #1
 80010ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	001a      	movs	r2, r3
 80010f6:	2301      	movs	r3, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	d00b      	beq.n	8001114 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	001a      	movs	r2, r3
 8001102:	2301      	movs	r3, #1
 8001104:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001106:	d005      	beq.n	8001114 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f9f6 	bl	8001500 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	001a      	movs	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d054      	beq.n	80011ca <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	001a      	movs	r2, r3
 8001126:	2301      	movs	r3, #1
 8001128:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800112a:	d04e      	beq.n	80011ca <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d12d      	bne.n	8001192 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2241      	movs	r2, #65	; 0x41
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b28      	cmp	r3, #40	; 0x28
 8001140:	d10b      	bne.n	800115a <I2C_Slave_ISR_IT+0x96>
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	049b      	lsls	r3, r3, #18
 8001148:	429a      	cmp	r2, r3
 800114a:	d106      	bne.n	800115a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f000 faf8 	bl	8001748 <I2C_ITListenCplt>
 8001158:	e036      	b.n	80011c8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2241      	movs	r2, #65	; 0x41
 800115e:	5c9b      	ldrb	r3, [r3, r2]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b29      	cmp	r3, #41	; 0x29
 8001164:	d110      	bne.n	8001188 <I2C_Slave_ISR_IT+0xc4>
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <I2C_Slave_ISR_IT+0x224>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00c      	beq.n	8001188 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2210      	movs	r2, #16
 8001174:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fc4a 	bl	8001a12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 f957 	bl	8001434 <I2C_ITSlaveSeqCplt>
 8001186:	e01f      	b.n	80011c8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2210      	movs	r2, #16
 800118e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001190:	e09d      	b.n	80012ce <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2210      	movs	r2, #16
 8001198:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	2204      	movs	r2, #4
 80011a0:	431a      	orrs	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <I2C_Slave_ISR_IT+0xf4>
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	045b      	lsls	r3, r3, #17
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d000      	beq.n	80011b8 <I2C_Slave_ISR_IT+0xf4>
 80011b6:	e08a      	b.n	80012ce <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 fb1b 	bl	80017fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80011c6:	e082      	b.n	80012ce <I2C_Slave_ISR_IT+0x20a>
 80011c8:	e081      	b.n	80012ce <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	001a      	movs	r2, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	d031      	beq.n	800123a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	001a      	movs	r2, r3
 80011dc:	2301      	movs	r3, #1
 80011de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80011e0:	d02b      	beq.n	800123a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d018      	beq.n	800121e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001208:	3b01      	subs	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b01      	subs	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001222:	b29b      	uxth	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d154      	bne.n	80012d2 <I2C_Slave_ISR_IT+0x20e>
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <I2C_Slave_ISR_IT+0x224>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d050      	beq.n	80012d2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0018      	movs	r0, r3
 8001234:	f000 f8fe 	bl	8001434 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001238:	e04b      	b.n	80012d2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	001a      	movs	r2, r3
 8001240:	2301      	movs	r3, #1
 8001242:	4013      	ands	r3, r2
 8001244:	d00c      	beq.n	8001260 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	001a      	movs	r2, r3
 800124c:	2301      	movs	r3, #1
 800124e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001250:	d006      	beq.n	8001260 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f000 f847 	bl	80012ec <I2C_ITAddrCplt>
 800125e:	e039      	b.n	80012d4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	001a      	movs	r2, r3
 8001266:	2301      	movs	r3, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d033      	beq.n	80012d4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	001a      	movs	r2, r3
 8001272:	2301      	movs	r3, #1
 8001274:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001276:	d02d      	beq.n	80012d4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d018      	beq.n	80012b4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80012b2:	e00f      	b.n	80012d4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	045b      	lsls	r3, r3, #17
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <I2C_Slave_ISR_IT+0x200>
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f8b4 	bl	8001434 <I2C_ITSlaveSeqCplt>
 80012cc:	e002      	b.n	80012d4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	e000      	b.n	80012d4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80012d2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b006      	add	sp, #24
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	ffff0000 	.word	0xffff0000

080012ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2241      	movs	r2, #65	; 0x41
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	001a      	movs	r2, r3
 8001300:	2328      	movs	r3, #40	; 0x28
 8001302:	4013      	ands	r3, r2
 8001304:	2b28      	cmp	r3, #40	; 0x28
 8001306:	d000      	beq.n	800130a <I2C_ITAddrCplt+0x1e>
 8001308:	e088      	b.n	800141c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	0c1b      	lsrs	r3, r3, #16
 8001312:	b2da      	uxtb	r2, r3
 8001314:	250f      	movs	r5, #15
 8001316:	197b      	adds	r3, r7, r5
 8001318:	2101      	movs	r1, #1
 800131a:	400a      	ands	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	b29a      	uxth	r2, r3
 8001328:	200c      	movs	r0, #12
 800132a:	183b      	adds	r3, r7, r0
 800132c:	21fe      	movs	r1, #254	; 0xfe
 800132e:	400a      	ands	r2, r1
 8001330:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	b29a      	uxth	r2, r3
 800133a:	240a      	movs	r4, #10
 800133c:	193b      	adds	r3, r7, r4
 800133e:	0592      	lsls	r2, r2, #22
 8001340:	0d92      	lsrs	r2, r2, #22
 8001342:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	b29a      	uxth	r2, r3
 800134c:	2308      	movs	r3, #8
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	21fe      	movs	r1, #254	; 0xfe
 8001352:	400a      	ands	r2, r1
 8001354:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d148      	bne.n	80013f0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800135e:	0021      	movs	r1, r4
 8001360:	187b      	adds	r3, r7, r1
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	09db      	lsrs	r3, r3, #7
 8001366:	b29a      	uxth	r2, r3
 8001368:	183b      	adds	r3, r7, r0
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	4053      	eors	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	001a      	movs	r2, r3
 8001372:	2306      	movs	r3, #6
 8001374:	4013      	ands	r3, r2
 8001376:	d120      	bne.n	80013ba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001378:	183b      	adds	r3, r7, r0
 800137a:	187a      	adds	r2, r7, r1
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	2b02      	cmp	r3, #2
 8001390:	d14c      	bne.n	800142c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	197b      	adds	r3, r7, r5
 80013ae:	7819      	ldrb	r1, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff fe5e 	bl	8001074 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80013b8:	e038      	b.n	800142c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80013ba:	240c      	movs	r4, #12
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	2208      	movs	r2, #8
 80013c0:	18ba      	adds	r2, r7, r2
 80013c2:	8812      	ldrh	r2, [r2, #0]
 80013c4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	021a      	lsls	r2, r3, #8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0011      	movs	r1, r2
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fb60 	bl	8001a94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	2100      	movs	r1, #0
 80013da:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	7819      	ldrb	r1, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fe43 	bl	8001074 <HAL_I2C_AddrCallback>
}
 80013ee:	e01d      	b.n	800142c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	021a      	lsls	r2, r3, #8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 fb4b 	bl	8001a94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001406:	230c      	movs	r3, #12
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	230f      	movs	r3, #15
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	7819      	ldrb	r1, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fe2d 	bl	8001074 <HAL_I2C_AddrCallback>
}
 800141a:	e007      	b.n	800142c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2208      	movs	r2, #8
 8001422:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bdb0      	pop	{r4, r5, r7, pc}

08001434 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2242      	movs	r2, #66	; 0x42
 8001448:	2100      	movs	r1, #0
 800144a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	0b9b      	lsrs	r3, r3, #14
 8001450:	001a      	movs	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d008      	beq.n	800146a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4925      	ldr	r1, [pc, #148]	; (80014f8 <I2C_ITSlaveSeqCplt+0xc4>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e00d      	b.n	8001486 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0bdb      	lsrs	r3, r3, #15
 800146e:	001a      	movs	r2, r3
 8001470:	2301      	movs	r3, #1
 8001472:	4013      	ands	r3, r2
 8001474:	d007      	beq.n	8001486 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	491e      	ldr	r1, [pc, #120]	; (80014fc <I2C_ITSlaveSeqCplt+0xc8>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2241      	movs	r2, #65	; 0x41
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b29      	cmp	r3, #41	; 0x29
 8001490:	d114      	bne.n	80014bc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2241      	movs	r2, #65	; 0x41
 8001496:	2128      	movs	r1, #40	; 0x28
 8001498:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2221      	movs	r2, #33	; 0x21
 800149e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2101      	movs	r1, #1
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 faf5 	bl	8001a94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fdcd 	bl	8001054 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80014ba:	e019      	b.n	80014f0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2241      	movs	r2, #65	; 0x41
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b2a      	cmp	r3, #42	; 0x2a
 80014c6:	d113      	bne.n	80014f0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2241      	movs	r2, #65	; 0x41
 80014cc:	2128      	movs	r1, #40	; 0x28
 80014ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2222      	movs	r2, #34	; 0x22
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2102      	movs	r1, #2
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 fada 	bl	8001a94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fdba 	bl	8001064 <HAL_I2C_SlaveRxCpltCallback>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	ffffbfff 	.word	0xffffbfff
 80014fc:	ffff7fff 	.word	0xffff7fff

08001500 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001516:	200f      	movs	r0, #15
 8001518:	183b      	adds	r3, r7, r0
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	2141      	movs	r1, #65	; 0x41
 800151e:	5c52      	ldrb	r2, [r2, r1]
 8001520:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800152a:	183b      	adds	r3, r7, r0
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b21      	cmp	r3, #33	; 0x21
 8001530:	d003      	beq.n	800153a <I2C_ITSlaveCplt+0x3a>
 8001532:	183b      	adds	r3, r7, r0
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b29      	cmp	r3, #41	; 0x29
 8001538:	d109      	bne.n	800154e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <I2C_ITSlaveCplt+0x230>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f000 faa7 	bl	8001a94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2221      	movs	r2, #33	; 0x21
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
 800154c:	e011      	b.n	8001572 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800154e:	220f      	movs	r2, #15
 8001550:	18bb      	adds	r3, r7, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b22      	cmp	r3, #34	; 0x22
 8001556:	d003      	beq.n	8001560 <I2C_ITSlaveCplt+0x60>
 8001558:	18bb      	adds	r3, r7, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b2a      	cmp	r3, #42	; 0x2a
 800155e:	d108      	bne.n	8001572 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001560:	4a74      	ldr	r2, [pc, #464]	; (8001734 <I2C_ITSlaveCplt+0x234>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0011      	movs	r1, r2
 8001566:	0018      	movs	r0, r3
 8001568:	f000 fa94 	bl	8001a94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2222      	movs	r2, #34	; 0x22
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0209      	lsls	r1, r1, #8
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	496a      	ldr	r1, [pc, #424]	; (8001738 <I2C_ITSlaveCplt+0x238>)
 8001590:	400a      	ands	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	0018      	movs	r0, r3
 8001598:	f000 fa3b 	bl	8001a12 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	0b9b      	lsrs	r3, r3, #14
 80015a0:	001a      	movs	r2, r3
 80015a2:	2301      	movs	r3, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d013      	beq.n	80015d0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4962      	ldr	r1, [pc, #392]	; (800173c <I2C_ITSlaveCplt+0x23c>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ce:	e018      	b.n	8001602 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	0bdb      	lsrs	r3, r3, #15
 80015d4:	001a      	movs	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d012      	beq.n	8001602 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4956      	ldr	r1, [pc, #344]	; (8001740 <I2C_ITSlaveCplt+0x240>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	001a      	movs	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	4013      	ands	r3, r2
 800160c:	d020      	beq.n	8001650 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2204      	movs	r2, #4
 8001612:	4393      	bics	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	3b01      	subs	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001646:	b29b      	uxth	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	2204      	movs	r2, #4
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2242      	movs	r2, #66	; 0x42
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f000 f8b9 	bl	80017fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2241      	movs	r2, #65	; 0x41
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b28      	cmp	r3, #40	; 0x28
 8001694:	d147      	bne.n	8001726 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f853 	bl	8001748 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80016a2:	e040      	b.n	8001726 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <I2C_ITSlaveCplt+0x244>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d016      	beq.n	80016dc <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff febf 	bl	8001434 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <I2C_ITSlaveCplt+0x244>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fcdd 	bl	8001094 <HAL_I2C_ListenCpltCallback>
}
 80016da:	e024      	b.n	8001726 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2241      	movs	r2, #65	; 0x41
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b22      	cmp	r3, #34	; 0x22
 80016e6:	d10f      	bne.n	8001708 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2241      	movs	r2, #65	; 0x41
 80016ec:	2120      	movs	r1, #32
 80016ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	2100      	movs	r1, #0
 80016fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fcaf 	bl	8001064 <HAL_I2C_SlaveRxCpltCallback>
}
 8001706:	e00e      	b.n	8001726 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2241      	movs	r2, #65	; 0x41
 800170c:	2120      	movs	r1, #32
 800170e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fc97 	bl	8001054 <HAL_I2C_SlaveTxCpltCallback>
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b006      	add	sp, #24
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	00008001 	.word	0x00008001
 8001734:	00008002 	.word	0x00008002
 8001738:	fe00e800 	.word	0xfe00e800
 800173c:	ffffbfff 	.word	0xffffbfff
 8001740:	ffff7fff 	.word	0xffff7fff
 8001744:	ffff0000 	.word	0xffff0000

08001748 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <I2C_ITListenCplt+0xac>)
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2241      	movs	r2, #65	; 0x41
 8001762:	2120      	movs	r1, #32
 8001764:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2242      	movs	r2, #66	; 0x42
 800176a:	2100      	movs	r1, #0
 800176c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	001a      	movs	r2, r3
 800177a:	2301      	movs	r3, #1
 800177c:	4013      	ands	r3, r2
 800177e:	d022      	beq.n	80017c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d012      	beq.n	80017c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	2204      	movs	r2, #4
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <I2C_ITListenCplt+0xb0>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f961 	bl	8001a94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2210      	movs	r2, #16
 80017d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	2100      	movs	r1, #0
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fc55 	bl	8001094 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	ffff0000 	.word	0xffff0000
 80017f8:	00008003 	.word	0x00008003

080017fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001806:	200f      	movs	r0, #15
 8001808:	183b      	adds	r3, r7, r0
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	2141      	movs	r1, #65	; 0x41
 800180e:	5c52      	ldrb	r2, [r2, r1]
 8001810:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2242      	movs	r2, #66	; 0x42
 8001816:	2100      	movs	r1, #0
 8001818:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a62      	ldr	r2, [pc, #392]	; (80019a8 <I2C_ITError+0x1ac>)
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001832:	183b      	adds	r3, r7, r0
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b28      	cmp	r3, #40	; 0x28
 8001838:	d007      	beq.n	800184a <I2C_ITError+0x4e>
 800183a:	183b      	adds	r3, r7, r0
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b29      	cmp	r3, #41	; 0x29
 8001840:	d003      	beq.n	800184a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001842:	183b      	adds	r3, r7, r0
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b2a      	cmp	r3, #42	; 0x2a
 8001848:	d10c      	bne.n	8001864 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2103      	movs	r1, #3
 800184e:	0018      	movs	r0, r3
 8001850:	f000 f920 	bl	8001a94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2241      	movs	r2, #65	; 0x41
 8001858:	2128      	movs	r1, #40	; 0x28
 800185a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a53      	ldr	r2, [pc, #332]	; (80019ac <I2C_ITError+0x1b0>)
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
 8001862:	e012      	b.n	800188a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <I2C_ITError+0x1b4>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f000 f912 	bl	8001a94 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2241      	movs	r2, #65	; 0x41
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b60      	cmp	r3, #96	; 0x60
 800187a:	d003      	beq.n	8001884 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2241      	movs	r2, #65	; 0x41
 8001880:	2120      	movs	r1, #32
 8001882:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03b      	beq.n	8001910 <I2C_ITError+0x114>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b11      	cmp	r3, #17
 800189c:	d002      	beq.n	80018a4 <I2C_ITError+0xa8>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b21      	cmp	r3, #33	; 0x21
 80018a2:	d135      	bne.n	8001910 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	401a      	ands	r2, r3
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	493c      	ldr	r1, [pc, #240]	; (80019b4 <I2C_ITError+0x1b8>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff f93f 	bl	8000b50 <HAL_DMA_GetState>
 80018d2:	0003      	movs	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d016      	beq.n	8001906 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <I2C_ITError+0x1bc>)
 80018de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff f8c5 	bl	8000a7c <HAL_DMA_Abort_IT>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d051      	beq.n	800199a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	0018      	movs	r0, r3
 8001902:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001904:	e049      	b.n	800199a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f859 	bl	80019c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800190e:	e044      	b.n	800199a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d03b      	beq.n	8001990 <I2C_ITError+0x194>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d002      	beq.n	8001924 <I2C_ITError+0x128>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b22      	cmp	r3, #34	; 0x22
 8001922:	d135      	bne.n	8001990 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	401a      	ands	r2, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <I2C_ITError+0x1c0>)
 8001944:	400a      	ands	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff f8ff 	bl	8000b50 <HAL_DMA_GetState>
 8001952:	0003      	movs	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	d016      	beq.n	8001986 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <I2C_ITError+0x1bc>)
 800195e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff f885 	bl	8000a7c <HAL_DMA_Abort_IT>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d013      	beq.n	800199e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	0018      	movs	r0, r3
 8001982:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001984:	e00b      	b.n	800199e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 f819 	bl	80019c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800198e:	e006      	b.n	800199e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f814 	bl	80019c0 <I2C_TreatErrorCallback>
  }
}
 8001998:	e002      	b.n	80019a0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	e000      	b.n	80019a0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800199e:	46c0      	nop			; (mov r8, r8)
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	ffff0000 	.word	0xffff0000
 80019ac:	080010c5 	.word	0x080010c5
 80019b0:	00008003 	.word	0x00008003
 80019b4:	ffffbfff 	.word	0xffffbfff
 80019b8:	08001a57 	.word	0x08001a57
 80019bc:	ffff7fff 	.word	0xffff7fff

080019c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2241      	movs	r2, #65	; 0x41
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b60      	cmp	r3, #96	; 0x60
 80019d2:	d10f      	bne.n	80019f4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2241      	movs	r2, #65	; 0x41
 80019d8:	2120      	movs	r1, #32
 80019da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2240      	movs	r2, #64	; 0x40
 80019e6:	2100      	movs	r1, #0
 80019e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fb61 	bl	80010b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80019f2:	e00a      	b.n	8001a0a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff fb4d 	bl	80010a4 <HAL_I2C_ErrorCallback>
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d103      	bne.n	8001a30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d007      	beq.n	8001a4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	619a      	str	r2, [r3, #24]
  }
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	2200      	movs	r2, #0
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	2200      	movs	r2, #0
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff ff9a 	bl	80019c0 <I2C_TreatErrorCallback>
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	1cbb      	adds	r3, r7, #2
 8001aa0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001aa6:	1cbb      	adds	r3, r7, #2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d010      	beq.n	8001ad2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2242      	movs	r2, #66	; 0x42
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2241      	movs	r2, #65	; 0x41
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2328      	movs	r3, #40	; 0x28
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b28      	cmp	r3, #40	; 0x28
 8001ac8:	d003      	beq.n	8001ad2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	22b0      	movs	r2, #176	; 0xb0
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001ad2:	1cbb      	adds	r3, r7, #2
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d010      	beq.n	8001afe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2244      	movs	r2, #68	; 0x44
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2241      	movs	r2, #65	; 0x41
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	001a      	movs	r2, r3
 8001aee:	2328      	movs	r3, #40	; 0x28
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b28      	cmp	r3, #40	; 0x28
 8001af4:	d003      	beq.n	8001afe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	22b0      	movs	r2, #176	; 0xb0
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	2200      	movs	r2, #0
 8001b02:	5e9b      	ldrsh	r3, [r3, r2]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da03      	bge.n	8001b10 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	22b8      	movs	r2, #184	; 0xb8
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001b10:	1cbb      	adds	r3, r7, #2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d103      	bne.n	8001b20 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2290      	movs	r2, #144	; 0x90
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001b20:	1cbb      	adds	r3, r7, #2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d103      	bne.n	8001b30 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001b30:	1cbb      	adds	r3, r7, #2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d103      	bne.n	8001b40 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43d9      	mvns	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2241      	movs	r2, #65	; 0x41
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d138      	bne.n	8001be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e032      	b.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	; 0x41
 8001b8c:	2124      	movs	r1, #36	; 0x24
 8001b8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2241      	movs	r2, #65	; 0x41
 8001bd4:	2120      	movs	r1, #32
 8001bd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	2100      	movs	r1, #0
 8001bde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	ffffefff 	.word	0xffffefff

08001bf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2241      	movs	r2, #65	; 0x41
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d139      	bne.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e033      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2240      	movs	r2, #64	; 0x40
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2241      	movs	r2, #65	; 0x41
 8001c24:	2124      	movs	r1, #36	; 0x24
 8001c26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2101      	movs	r1, #1
 8001c34:	438a      	bics	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2241      	movs	r2, #65	; 0x41
 8001c6e:	2120      	movs	r1, #32
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fffff0ff 	.word	0xfffff0ff

08001c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d11f      	bne.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	189b      	adds	r3, r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4912      	ldr	r1, [pc, #72]	; (8001d08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7fe fa20 	bl	8000104 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cca:	e008      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e001      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e009      	b.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d0ed      	beq.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	fffff9ff 	.word	0xfffff9ff
 8001d04:	20000000 	.word	0x20000000
 8001d08:	000f4240 	.word	0x000f4240

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e2f9      	b.n	8002312 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_RCC_OscConfig+0x1e>
 8001d28:	e07c      	b.n	8001e24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2a:	4bc3      	ldr	r3, [pc, #780]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2238      	movs	r2, #56	; 0x38
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d34:	4bc0      	ldr	r3, [pc, #768]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3e>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d10b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	4bb9      	ldr	r3, [pc, #740]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d062      	beq.n	8001e22 <HAL_RCC_OscConfig+0x116>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d15e      	bne.n	8001e22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e2d4      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x78>
 8001d74:	4bb0      	ldr	r3, [pc, #704]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4baf      	ldr	r3, [pc, #700]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	0249      	lsls	r1, r1, #9
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e020      	b.n	8001dc6 <HAL_RCC_OscConfig+0xba>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23a0      	movs	r3, #160	; 0xa0
 8001d8a:	02db      	lsls	r3, r3, #11
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10e      	bne.n	8001dae <HAL_RCC_OscConfig+0xa2>
 8001d90:	4ba9      	ldr	r3, [pc, #676]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4ba8      	ldr	r3, [pc, #672]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	02c9      	lsls	r1, r1, #11
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	4ba6      	ldr	r3, [pc, #664]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4ba5      	ldr	r3, [pc, #660]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0249      	lsls	r1, r1, #9
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0xba>
 8001dae:	4ba2      	ldr	r3, [pc, #648]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	49a1      	ldr	r1, [pc, #644]	; (800203c <HAL_RCC_OscConfig+0x330>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	4b9f      	ldr	r3, [pc, #636]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b9e      	ldr	r3, [pc, #632]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	499f      	ldr	r1, [pc, #636]	; (8002040 <HAL_RCC_OscConfig+0x334>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d014      	beq.n	8001df8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe fd6d 	bl	80008ac <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fd68 	bl	80008ac <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e293      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	4b93      	ldr	r3, [pc, #588]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xcc>
 8001df6:	e015      	b.n	8001e24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe fd58 	bl	80008ac <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e02:	f7fe fd53 	bl	80008ac <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e27e      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e14:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0xf6>
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_RCC_OscConfig+0x124>
 8001e2e:	e099      	b.n	8001f64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2238      	movs	r2, #56	; 0x38
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_OscConfig+0x144>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d135      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e56:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x162>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e251      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b72      	ldr	r3, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a74      	ldr	r2, [pc, #464]	; (8002044 <HAL_RCC_OscConfig+0x338>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	021a      	lsls	r2, r3, #8
 8001e7e:	4b6e      	ldr	r3, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e8a:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x33c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e9e:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a68      	ldr	r2, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x340>)
 8001eaa:	40da      	lsrs	r2, r3
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x344>)
 8001eae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_OscConfig+0x348>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fc9d 	bl	80007f4 <HAL_InitTick>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d051      	beq.n	8001f62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e227      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d030      	beq.n	8001f2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_RCC_OscConfig+0x33c>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b55      	ldr	r3, [pc, #340]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0049      	lsls	r1, r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe fcde 	bl	80008ac <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7fe fcd9 	bl	80008ac <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e204      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x338>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	021a      	lsls	r2, r3, #8
 8001f24:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	e01b      	b.n	8001f64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	4949      	ldr	r1, [pc, #292]	; (8002058 <HAL_RCC_OscConfig+0x34c>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe fcb8 	bl	80008ac <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe fcb3 	bl	80008ac <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1de      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x236>
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d047      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2238      	movs	r2, #56	; 0x38
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b18      	cmp	r3, #24
 8001f78:	d10a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	d03c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2f2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d138      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e1c0      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d019      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9c:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fc82 	bl	80008ac <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7fe fc7d 	bl	80008ac <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1a8      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d0f1      	beq.n	8001fae <HAL_RCC_OscConfig+0x2a2>
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fc68 	bl	80008ac <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fc63 	bl	80008ac <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e18e      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d1f1      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2204      	movs	r2, #4
 8002004:	4013      	ands	r3, r2
 8002006:	d100      	bne.n	800200a <HAL_RCC_OscConfig+0x2fe>
 8002008:	e0c6      	b.n	8002198 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	231f      	movs	r3, #31
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2238      	movs	r2, #56	; 0x38
 8002018:	4013      	ands	r3, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d11e      	bne.n	800205c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x32c>)
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x31e>
 8002028:	e0b6      	b.n	8002198 <HAL_RCC_OscConfig+0x48c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d000      	beq.n	8002034 <HAL_RCC_OscConfig+0x328>
 8002032:	e0b1      	b.n	8002198 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e16c      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
 8002038:	40021000 	.word	0x40021000
 800203c:	fffeffff 	.word	0xfffeffff
 8002040:	fffbffff 	.word	0xfffbffff
 8002044:	ffff80ff 	.word	0xffff80ff
 8002048:	ffffc7ff 	.word	0xffffc7ff
 800204c:	00f42400 	.word	0x00f42400
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004
 8002058:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205c:	4baf      	ldr	r3, [pc, #700]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800205e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	4013      	ands	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x360>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x362>
 800206c:	2300      	movs	r3, #0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d011      	beq.n	8002096 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4baa      	ldr	r3, [pc, #680]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002076:	4ba9      	ldr	r3, [pc, #676]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0549      	lsls	r1, r1, #21
 800207c:	430a      	orrs	r2, r1
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002080:	4ba6      	ldr	r3, [pc, #664]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	055b      	lsls	r3, r3, #21
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800208e:	231f      	movs	r3, #31
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002096:	4ba2      	ldr	r3, [pc, #648]	; (8002320 <HAL_RCC_OscConfig+0x614>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	d11a      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a2:	4b9f      	ldr	r3, [pc, #636]	; (8002320 <HAL_RCC_OscConfig+0x614>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCC_OscConfig+0x614>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0049      	lsls	r1, r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fbfc 	bl	80008ac <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fbf7 	bl	80008ac <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e122      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x614>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x3e2>
 80020e0:	4b8e      	ldr	r3, [pc, #568]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80020e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e4:	4b8d      	ldr	r3, [pc, #564]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x41c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x404>
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80020f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80020fc:	2104      	movs	r1, #4
 80020fe:	430a      	orrs	r2, r1
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
 8002102:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x41c>
 8002110:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002114:	4b81      	ldr	r3, [pc, #516]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
 800211c:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800211e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002120:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002122:	2104      	movs	r1, #4
 8002124:	438a      	bics	r2, r1
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d014      	beq.n	800215a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fbbc 	bl	80008ac <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002138:	e009      	b.n	800214e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fbb7 	bl	80008ac <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a77      	ldr	r2, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x618>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0e1      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x42e>
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe fba7 	bl	80008ac <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002162:	e009      	b.n	8002178 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fba2 	bl	80008ac <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	4a6d      	ldr	r2, [pc, #436]	; (8002324 <HAL_RCC_OscConfig+0x618>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0cc      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002182:	231f      	movs	r3, #31
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800218e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002190:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002192:	4965      	ldr	r1, [pc, #404]	; (8002328 <HAL_RCC_OscConfig+0x61c>)
 8002194:	400a      	ands	r2, r1
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d100      	bne.n	80021a2 <HAL_RCC_OscConfig+0x496>
 80021a0:	e0b6      	b.n	8002310 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2238      	movs	r2, #56	; 0x38
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d100      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4a4>
 80021ae:	e07e      	b.n	80022ae <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d153      	bne.n	8002260 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80021be:	495b      	ldr	r1, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x620>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fb72 	bl	80008ac <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fb6d 	bl	80008ac <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e098      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	049b      	lsls	r3, r3, #18
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_RCC_OscConfig+0x624>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	431a      	orrs	r2, r3
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0449      	lsls	r1, r1, #17
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002228:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	0549      	lsls	r1, r1, #21
 8002232:	430a      	orrs	r2, r1
 8002234:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fb39 	bl	80008ac <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fb34 	bl	80008ac <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e05f      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	049b      	lsls	r3, r3, #18
 800225a:	4013      	ands	r3, r2
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x534>
 800225e:	e057      	b.n	8002310 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002266:	4931      	ldr	r1, [pc, #196]	; (800232c <HAL_RCC_OscConfig+0x620>)
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x610>)
 8002272:	2103      	movs	r1, #3
 8002274:	438a      	bics	r2, r1
 8002276:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x610>)
 800227e:	492d      	ldr	r1, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x628>)
 8002280:	400a      	ands	r2, r1
 8002282:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fb12 	bl	80008ac <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe fb0d 	bl	80008ac <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e038      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	049b      	lsls	r3, r3, #18
 80022a8:	4013      	ands	r3, r2
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x582>
 80022ac:	e030      	b.n	8002310 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02b      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_OscConfig+0x610>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2203      	movs	r2, #3
 80022c4:	401a      	ands	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11e      	bne.n	800230c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2270      	movs	r2, #112	; 0x70
 80022d2:	401a      	ands	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d117      	bne.n	800230c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	23fe      	movs	r3, #254	; 0xfe
 80022e0:	01db      	lsls	r3, r3, #7
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d10e      	bne.n	800230c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	23f8      	movs	r3, #248	; 0xf8
 80022f2:	039b      	lsls	r3, r3, #14
 80022f4:	401a      	ands	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	0f5b      	lsrs	r3, r3, #29
 8002302:	075a      	lsls	r2, r3, #29
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b008      	add	sp, #32
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	00001388 	.word	0x00001388
 8002328:	efffffff 	.word	0xefffffff
 800232c:	feffffff 	.word	0xfeffffff
 8002330:	1fc1808c 	.word	0x1fc1808c
 8002334:	effeffff 	.word	0xeffeffff

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0e9      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2207      	movs	r2, #7
 8002352:	4013      	ands	r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d91e      	bls.n	8002398 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b73      	ldr	r3, [pc, #460]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2207      	movs	r2, #7
 8002360:	4393      	bics	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800236c:	f7fe fa9e 	bl	80008ac <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002374:	e009      	b.n	800238a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002376:	f7fe fa99 	bl	80008ac <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_RCC_ClockConfig+0x1f4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0ca      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2207      	movs	r2, #7
 8002390:	4013      	ands	r3, r2
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d006      	beq.n	80023ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ac:	4b60      	ldr	r3, [pc, #384]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023b2:	21e0      	movs	r1, #224	; 0xe0
 80023b4:	01c9      	lsls	r1, r1, #7
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_RCC_ClockConfig+0x1fc>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d057      	beq.n	8002488 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	4013      	ands	r3, r2
 80023ea:	d12b      	bne.n	8002444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e097      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f8:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	049b      	lsls	r3, r3, #18
 8002400:	4013      	ands	r3, r2
 8002402:	d11f      	bne.n	8002444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e08b      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4013      	ands	r3, r2
 800241a:	d113      	bne.n	8002444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e07f      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d106      	bne.n	8002436 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	2202      	movs	r2, #2
 800242e:	4013      	ands	r3, r2
 8002430:	d108      	bne.n	8002444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e074      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e06d      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2207      	movs	r2, #7
 800244a:	4393      	bics	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7fe fa28 	bl	80008ac <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e009      	b.n	8002476 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe fa23 	bl	80008ac <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	4a2f      	ldr	r2, [pc, #188]	; (800252c <HAL_RCC_ClockConfig+0x1f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e054      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2238      	movs	r2, #56	; 0x38
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ec      	bne.n	8002462 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2207      	movs	r2, #7
 800248e:	4013      	ands	r3, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d21e      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2207      	movs	r2, #7
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fa00 	bl	80008ac <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7fe f9fb 	bl	80008ac <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_RCC_ClockConfig+0x1f4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e02c      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2207      	movs	r2, #7
 80024cc:	4013      	ands	r3, r2
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ee      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2204      	movs	r2, #4
 80024da:	4013      	ands	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <HAL_RCC_ClockConfig+0x200>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024f2:	f000 f829 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80024f6:	0001      	movs	r1, r0
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	220f      	movs	r2, #15
 8002500:	401a      	ands	r2, r3
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_RCC_ClockConfig+0x204>)
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	58d3      	ldr	r3, [r2, r3]
 8002508:	221f      	movs	r2, #31
 800250a:	4013      	ands	r3, r2
 800250c:	000a      	movs	r2, r1
 800250e:	40da      	lsrs	r2, r3
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x208>)
 8002512:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x20c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe f96b 	bl	80007f4 <HAL_InitTick>
 800251e:	0003      	movs	r3, r0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40022000 	.word	0x40022000
 800252c:	00001388 	.word	0x00001388
 8002530:	40021000 	.word	0x40021000
 8002534:	fffff0ff 	.word	0xfffff0ff
 8002538:	ffff8fff 	.word	0xffff8fff
 800253c:	08002f60 	.word	0x08002f60
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2238      	movs	r2, #56	; 0x38
 8002554:	4013      	ands	r3, r2
 8002556:	d10f      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0adb      	lsrs	r3, r3, #11
 800255e:	2207      	movs	r2, #7
 8002560:	4013      	ands	r3, r2
 8002562:	2201      	movs	r2, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	4835      	ldr	r0, [pc, #212]	; (8002644 <HAL_RCC_GetSysClockFreq+0xfc>)
 800256e:	f7fd fdc9 	bl	8000104 <__udivsi3>
 8002572:	0003      	movs	r3, r0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e05d      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2238      	movs	r2, #56	; 0x38
 800257e:	4013      	ands	r3, r2
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_GetSysClockFreq+0x100>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e054      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2238      	movs	r2, #56	; 0x38
 8002590:	4013      	ands	r3, r2
 8002592:	2b10      	cmp	r3, #16
 8002594:	d138      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2203      	movs	r2, #3
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	2207      	movs	r2, #7
 80025a8:	4013      	ands	r3, r2
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	4824      	ldr	r0, [pc, #144]	; (8002648 <HAL_RCC_GetSysClockFreq+0x100>)
 80025b8:	f7fd fda4 	bl	8000104 <__udivsi3>
 80025bc:	0003      	movs	r3, r0
 80025be:	0019      	movs	r1, r3
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	227f      	movs	r2, #127	; 0x7f
 80025c8:	4013      	ands	r3, r2
 80025ca:	434b      	muls	r3, r1
 80025cc:	617b      	str	r3, [r7, #20]
        break;
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	481c      	ldr	r0, [pc, #112]	; (8002644 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025d4:	f7fd fd96 	bl	8000104 <__udivsi3>
 80025d8:	0003      	movs	r3, r0
 80025da:	0019      	movs	r1, r3
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	227f      	movs	r2, #127	; 0x7f
 80025e4:	4013      	ands	r3, r2
 80025e6:	434b      	muls	r3, r1
 80025e8:	617b      	str	r3, [r7, #20]
        break;
 80025ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0f5b      	lsrs	r3, r3, #29
 80025f2:	2207      	movs	r2, #7
 80025f4:	4013      	ands	r3, r2
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7fd fd81 	bl	8000104 <__udivsi3>
 8002602:	0003      	movs	r3, r0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e015      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2238      	movs	r2, #56	; 0x38
 800260e:	4013      	ands	r3, r2
 8002610:	2b20      	cmp	r3, #32
 8002612:	d103      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2238      	movs	r2, #56	; 0x38
 8002622:	4013      	ands	r3, r2
 8002624:	2b18      	cmp	r3, #24
 8002626:	d103      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002628:	23fa      	movs	r3, #250	; 0xfa
 800262a:	01db      	lsls	r3, r3, #7
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e001      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002634:	693b      	ldr	r3, [r7, #16]
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b006      	add	sp, #24
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40021000 	.word	0x40021000
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e04a      	b.n	80026f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223d      	movs	r2, #61	; 0x3d
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	; 0x3c
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f7fe f80b 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223d      	movs	r2, #61	; 0x3d
 800267e:	2102      	movs	r1, #2
 8002680:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	0019      	movs	r1, r3
 800268c:	0010      	movs	r0, r2
 800268e:	f000 faa1 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2248      	movs	r2, #72	; 0x48
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223e      	movs	r2, #62	; 0x3e
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2241      	movs	r2, #65	; 0x41
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2242      	movs	r2, #66	; 0x42
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2243      	movs	r2, #67	; 0x43
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2244      	movs	r2, #68	; 0x44
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2245      	movs	r2, #69	; 0x45
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2246      	movs	r2, #70	; 0x46
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2247      	movs	r2, #71	; 0x47
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223d      	movs	r2, #61	; 0x3d
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223d      	movs	r2, #61	; 0x3d
 8002708:	5c9b      	ldrb	r3, [r3, r2]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d001      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e037      	b.n	8002784 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	223d      	movs	r2, #61	; 0x3d
 8002718:	2102      	movs	r1, #2
 800271a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a16      	ldr	r2, [pc, #88]	; (800278c <HAL_TIM_Base_Start_IT+0x90>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x44>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <HAL_TIM_Base_Start_IT+0x94>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d116      	bne.n	800276e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_TIM_Base_Start_IT+0x98>)
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b06      	cmp	r3, #6
 8002750:	d016      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x84>
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	429a      	cmp	r2, r3
 800275a:	d011      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276c:	e008      	b.n	8002780 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e000      	b.n	8002782 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002780:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400
 8002794:	00010007 	.word	0x00010007

08002798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d124      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d11d      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4252      	negs	r2, r2
 80027c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2203      	movs	r2, #3
 80027d4:	4013      	ands	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f9e2 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f9d5 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f9e1 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	2b04      	cmp	r3, #4
 8002804:	d125      	bne.n	8002852 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	4013      	ands	r3, r2
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11e      	bne.n	8002852 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2205      	movs	r2, #5
 800281a:	4252      	negs	r2, r2
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f9b5 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 800283a:	e007      	b.n	800284c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 f9a8 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f9b4 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2208      	movs	r2, #8
 800285a:	4013      	ands	r3, r2
 800285c:	2b08      	cmp	r3, #8
 800285e:	d124      	bne.n	80028aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2208      	movs	r2, #8
 8002868:	4013      	ands	r3, r2
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11d      	bne.n	80028aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2209      	movs	r2, #9
 8002874:	4252      	negs	r2, r2
 8002876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2203      	movs	r2, #3
 8002886:	4013      	ands	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f989 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 8002892:	e007      	b.n	80028a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f97c 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f988 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d125      	bne.n	8002904 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2210      	movs	r2, #16
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d11e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2211      	movs	r2, #17
 80028cc:	4252      	negs	r2, r2
 80028ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2208      	movs	r2, #8
 80028d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f95c 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e007      	b.n	80028fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f94f 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f95b 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10f      	bne.n	8002932 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4252      	negs	r2, r2
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f7fd fd1d 	bl	800036c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	4013      	ands	r3, r2
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d10f      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	4013      	ands	r3, r2
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d108      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2281      	movs	r2, #129	; 0x81
 8002954:	4252      	negs	r2, r2
 8002956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0018      	movs	r0, r3
 800295c:	f000 faac 	bl	8002eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	401a      	ands	r2, r3
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	429a      	cmp	r2, r3
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	4013      	ands	r3, r2
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_TIM_IRQHandler+0x260>)
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fa9b 	bl	8002ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d10f      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d108      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2241      	movs	r2, #65	; 0x41
 80029b4:	4252      	negs	r2, r2
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f902 	bl	8002bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d10f      	bne.n	80029ee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d108      	bne.n	80029ee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	4252      	negs	r2, r2
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fa5d 	bl	8002ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	fffffeff 	.word	0xfffffeff

080029fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223c      	movs	r2, #60	; 0x3c
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_ConfigClockSource+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0b7      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x188>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	223c      	movs	r2, #60	; 0x3c
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223d      	movs	r2, #61	; 0x3d
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_TIM_ConfigClockSource+0x190>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_TIM_ConfigClockSource+0x194>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	0192      	lsls	r2, r2, #6
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d040      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0xd6>
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	0192      	lsls	r2, r2, #6
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d900      	bls.n	8002a5a <HAL_TIM_ConfigClockSource+0x5e>
 8002a58:	e088      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	0152      	lsls	r2, r2, #5
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d100      	bne.n	8002a64 <HAL_TIM_ConfigClockSource+0x68>
 8002a62:	e085      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0152      	lsls	r2, r2, #5
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d900      	bls.n	8002a6e <HAL_TIM_ConfigClockSource+0x72>
 8002a6c:	e07e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a6e:	2b70      	cmp	r3, #112	; 0x70
 8002a70:	d018      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0xa8>
 8002a72:	d900      	bls.n	8002a76 <HAL_TIM_ConfigClockSource+0x7a>
 8002a74:	e07a      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a76:	2b60      	cmp	r3, #96	; 0x60
 8002a78:	d04f      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x11e>
 8002a7a:	d900      	bls.n	8002a7e <HAL_TIM_ConfigClockSource+0x82>
 8002a7c:	e076      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a7e:	2b50      	cmp	r3, #80	; 0x50
 8002a80:	d03b      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xfe>
 8002a82:	d900      	bls.n	8002a86 <HAL_TIM_ConfigClockSource+0x8a>
 8002a84:	e072      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d057      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x13e>
 8002a8a:	d900      	bls.n	8002a8e <HAL_TIM_ConfigClockSource+0x92>
 8002a8c:	e06e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a8e:	2b30      	cmp	r3, #48	; 0x30
 8002a90:	d063      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x15e>
 8002a92:	d86b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d060      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x15e>
 8002a98:	d868      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d05d      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x15e>
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d05b      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aa2:	e063      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f000 f976 	bl	8002da4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2277      	movs	r2, #119	; 0x77
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
      break;
 8002ad0:	e04f      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f000 f95f 	bl	8002da4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	01c9      	lsls	r1, r1, #7
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
      break;
 8002af8:	e03b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	001a      	movs	r2, r3
 8002b08:	f000 f8d0 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2150      	movs	r1, #80	; 0x50
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f92a 	bl	8002d6c <TIM_ITRx_SetConfig>
      break;
 8002b18:	e02b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	001a      	movs	r2, r3
 8002b28:	f000 f8ee 	bl	8002d08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2160      	movs	r1, #96	; 0x60
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 f91a 	bl	8002d6c <TIM_ITRx_SetConfig>
      break;
 8002b38:	e01b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	001a      	movs	r2, r3
 8002b48:	f000 f8b0 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2140      	movs	r1, #64	; 0x40
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f90a 	bl	8002d6c <TIM_ITRx_SetConfig>
      break;
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0019      	movs	r1, r3
 8002b64:	0010      	movs	r0, r2
 8002b66:	f000 f901 	bl	8002d6c <TIM_ITRx_SetConfig>
        break;
 8002b6a:	e002      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002b70:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223d      	movs	r2, #61	; 0x3d
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	223c      	movs	r2, #60	; 0x3c
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	ffceff88 	.word	0xffceff88
 8002b90:	ffff00ff 	.word	0xffff00ff

08002b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x20>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <TIM_Base_SetConfig+0xc4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2270      	movs	r2, #112	; 0x70
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00f      	beq.n	8002c2e <TIM_Base_SetConfig+0x5a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <TIM_Base_SetConfig+0xc4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <TIM_Base_SetConfig+0x5a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <TIM_Base_SetConfig+0xc8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0x5a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <TIM_Base_SetConfig+0xcc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0x5a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <TIM_Base_SetConfig+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <TIM_Base_SetConfig+0xd4>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	4393      	bics	r3, r2
 8002c46:	001a      	movs	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0xaa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <TIM_Base_SetConfig+0xcc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0xaa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <TIM_Base_SetConfig+0xd0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d103      	bne.n	8002c86 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40002000 	.word	0x40002000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800
 8002ca8:	fffffcff 	.word	0xfffffcff

08002cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	22f0      	movs	r2, #240	; 0xf0
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	220a      	movs	r2, #10
 8002ce8:	4393      	bics	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <TIM_TI2_ConfigInputStage+0x60>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	22a0      	movs	r2, #160	; 0xa0
 8002d44:	4393      	bics	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b006      	add	sp, #24
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	ffff0fff 	.word	0xffff0fff

08002d6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <TIM_ITRx_SetConfig+0x34>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	ffcfff8f 	.word	0xffcfff8f

08002da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <TIM_ETR_SetConfig+0x3c>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	021a      	lsls	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b006      	add	sp, #24
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	ffff00ff 	.word	0xffff00ff

08002de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	; 0x3c
 8002df2:	5c9b      	ldrb	r3, [r3, r2]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e04a      	b.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223c      	movs	r2, #60	; 0x3c
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223d      	movs	r2, #61	; 0x3d
 8002e08:	2102      	movs	r1, #2
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2270      	movs	r2, #112	; 0x70
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10c      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	223d      	movs	r2, #61	; 0x3d
 8002e84:	2101      	movs	r1, #1
 8002e86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223c      	movs	r2, #60	; 0x3c
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	ff0fffff 	.word	0xff0fffff
 8002ea4:	40000400 	.word	0x40000400

08002ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2600      	movs	r6, #0
 8002edc:	4d0c      	ldr	r5, [pc, #48]	; (8002f10 <__libc_init_array+0x38>)
 8002ede:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	f000 f821 	bl	8002f30 <_init>
 8002eee:	4d0a      	ldr	r5, [pc, #40]	; (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	; (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	00b3      	lsls	r3, r6, #2
 8002efe:	58eb      	ldr	r3, [r5, r3]
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	00b3      	lsls	r3, r6, #2
 8002f08:	58eb      	ldr	r3, [r5, r3]
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002fa0 	.word	0x08002fa0
 8002f14:	08002fa0 	.word	0x08002fa0
 8002f18:	08002fa0 	.word	0x08002fa0
 8002f1c:	08002fa4 	.word	0x08002fa4

08002f20 <memset>:
 8002f20:	0003      	movs	r3, r0
 8002f22:	1882      	adds	r2, r0, r2
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	7019      	strb	r1, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
